openapi: 3.0.3
info:
  title: Binar Academy Post API - FSW1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: My Github
  url: https://github.com/TheReVeaLz
servers:
  - url: https://idea-academy.up.railway.app/
tags:
  - name: user
    description: Operations about your user
  - name: course
    description: Operations about your Course
  - name: chapter
    description: Operations about your Chapter
  - name: module
    description: Operations about your module
paths:
  /api/v1/module:
    get:
      tags:
        - module
      summary: Get Modules
      description: Retrieve a list of modules
      operationId: getModules
      responses:
        '200':
            description: List of Module
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/OK'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            oneOf:
                              - $ref: '#/components/schemas/Module2'
                              - $ref: '#/components/schemas/Module3'
                              
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to retrieve the list of Modules'
                        
  /api/v1/chapter/{id}/:
    post:
      tags:
        - module
      summary: Create Module
      description: create a module using the chapter ID
      operationId: createModuleInChapter
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
          description: ID of the chapter in which the module will be created

      requestBody:
        description: Module object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'

      responses:
        '200':
            description: Create Module
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/OK'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/Module2'
                            
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to Create Module'
                        
  /api/v1/module/{id}:
    get:
      tags:
        - module
      summary: Get a module details by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
          
      responses:
        '200':
          description:  get course details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OK'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Module2'
                            
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Course not found'
                        
    put:
      tags:
        - module
      summary: Update Module
      description: Update an existing module
      operationId: updateModule
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
          description: ID of the module to be updated

      requestBody:
        description: Updated Module object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'

      responses:
        '200':
            description: Update Module
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/OK'
                    - type: object
                      properties:
                        data:
                          type: array
                          items:
                            $ref: '#/components/schemas/Module2'
                            
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Course not found'
                        
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to update module by ID: ...'
                        
    delete:
      tags:
        - module
      summary: Delete Module
      description: Delete an existing module
      operationId: deleteModule
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
          description: ID of the module to be deleted

      responses:
        '200':
          description: Delete Module
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'Success'
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            example: 82087470-5913-4137-bb57-a889d9b3030e
                      - $ref: '#/components/schemas/Module'
                          
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Course not found'
                        
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to Delete module by ID: ...'
                        
  /api/v1/chapter:
    get:
      tags:
        - chapter
      summary: Get list Chapter
      description: Get all Chapter list
      operationId: getChapterList
      responses:
        '200':
          description: List of chapter
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'success'
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Chapter2'
                        - $ref: '#/components/schemas/Chapter3'
                        
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Failed to retrieve the list of chapter
                        
  /api/v1/course/{id}/:
    post:
      tags:
        - chapter
      summary: Create Chapter
      description: create chapter using course ID
      operationId: createChapter
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
          description: ID of the course for which the chapter is created

      requestBody:
        description: Chapter object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chapter'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'success'
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            example: 82087470-5913-4137-bb57-a889d9b3030e
                      - $ref: '#/components/schemas/Chapter'
                      - type: object
                        properties:
                          createdAt:
                            example: 2023-11-24T10:10:02.523Z
                          updatedAt:
                            example: 2023-11-24T10:10:02.523Z

        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Failed to retrieve the list of chapter

  /api/v1/chapter/{id}:
    get:
      tags:
        - chapter
      summary: Get a chapter by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'success'
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            example: 82087470-5913-4137-bb57-a889d9b3030e
                      - $ref: '#/components/schemas/Chapter'
                      - type: object
                        properties:
                          createdAt:
                            example: 2023-11-24T10:10:02.523Z
                          updatedAt:
                            example: 2023-11-24T10:10:02.523Z

        '404':
          description: Id Not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Chapter not found'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: ...'
                        
    put:
      tags:
        - chapter
      summary: Update chapter by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true

      requestBody:
        description: update chapter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chapter'
        required: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'success'
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              example: 82087470-5913-4137-bb57-a889d9b3030e
                        - $ref: '#/components/schemas/Chapter'
                        - type: object
                          properties:
                            createdAt:
                              example: 2023-11-24T10:10:02.523Z
                            updatedAt:
                              example: 2023-11-24T10:10:02.523Z

        '404':
          description: Id Not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get chapter by ID: Chapter not found'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to update chapter by ID'
    delete:
      tags:
        - chapter
      summary: Get a chapter by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'Success'
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            example: 82087470-5913-4137-bb57-a889d9b3030e
                      - $ref: '#/components/schemas/Chapter'
                      - type: object
                        properties:
                          createdAt:
                            example: 2023-11-24T10:10:02.523Z
                          updatedAt:
                            example: 2023-11-24T10:10:02.523Z

        '404':
          description: Id Not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get chapter by ID: Chapter not found'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to delete chapter by ID'

  /api/v1/course:
    get:
      summary: Get a list of courses
      tags:
        - course
      description: Get all course list
      parameters:
        - name: level
          in: query
          description: Filter courses by type (free or premium)
          required: false
          schema:
            type: string
            enum:
              - beginner
              - intermediate
              - advance
              
        - name: category
          in: query
          description: Filter courses by category
          required: false
          schema:
            type: string
            enum:
              - ui/ux design
              - web development
              - android development
              - product management
              - ios develoment
              
        - name: type
          in: query
          description: Filter courses by type
          required: false
          schema:
            type: string
            enum:
              - free
              - premium
              
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'success'
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Course1'
                        - $ref: '#/components/schemas/Course2'
                        - $ref: '#/components/schemas/Course3'
                        
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Failed to retrieve the list of course

    post:
      tags:
        - course
      summary: Create a course
      requestBody:
        description: Register new user
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseList'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'success'
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            example: 82087470-5913-4137-bb57-a889d9b3030e
                      - $ref: '#/components/schemas/CourseList'
                      - type: object
                        properties:
                          createdAt:
                            example: 2023-11-24T10:10:02.523Z
                          updatedAt:
                            example: 2023-11-24T10:10:02.523Z
                            
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Failed to retrieve the list of course

  /api/v1/course/{id}:
    get:
      tags:
        - course
      summary: Get a course details by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
      responses:
      
        '200':
          description:  get course details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OK'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Course3'
                            - type: object
                              properties:
                                chapters:
                                  type: array
                                  items:
                                    allOf:
                                      - $ref: '#/components/schemas/Chapter'
                                      - type: object
                                        properties:
                                          modules:
                                            type: array
                                            items:
                                              allOf:
                                                - $ref: '#/components/schemas/Module'
                                                
        '404':
          description: Id Not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Course not found'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: ...'
    put:
      tags:
        - course
      summary: Update a course by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true
          
      requestBody:
        description: Register new user
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseList'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'Data was updated successfully.'
                  data:
                    $ref: '#/components/schemas/CourseList'
                    
        '404':
          description: Id Not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Course not found'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to update data.'

    delete:
      tags:
        - course
      summary: Delete a Course by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: '82087470-5913-4137-bb57-a889d9b3030e'
          required: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'OK'
                  message:
                    type: string
                    example: 'Deleted successfully.'
                  data:
                    $ref: '#/components/schemas/Course3'
                    
        '404':
          description: Id Not found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Failed to get course by ID: Course not found'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: 'Internal Server Error'

  /api/v1/register:
    post:
      tags:
        - user
      summary: Register new user
      description: Register new user
      operationId: registerUser
      requestBody:
        description: Register new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequest'
        required: true
        
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data was created successfully.
                  data:
                    $ref: '#/components/schemas/User3'
                    
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Body is missing.
                    
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Failed to create data. Validation error
                        
  /api/v1/login:
    post:
      tags:
        - user
      summary: Login user
      description: Login user
      operationId: loginUser
      requestBody:
        description: Login user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RootLogin'
        required: true
        
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OK'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Login successfully.
                      data:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/User'
                          - type: object
                            properties:
                              token:
                                type: string
                                example: >-
                                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQyZDZkNzkyLWZlNzUtNDYxMy1iMWMyLTU3OWVkMDU2NGIzYyIsImlhdCI6MTY5NzgzNDE3OSwiZXhwIjoxNjk3ODM3Nzc5fQ.JHrFKoKLtze1NwbWoKLsZR3-Gs3LtT5MtHJG-WVmyPs
                                  
        '400':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Please input email and password.
                        
        '404':
          description: Email or password is invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Email or password is invalid.
                        
  /api/v1/users:
    get:
      tags:
        - user
      summary: Get all user list
      description: Get all user list
      operationId: getUserList
      security:
        - api_key: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OK'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          oneOf:
                            - $ref: '#/components/schemas/User'
                            - $ref: '#/components/schemas/User2'
                            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Unauthorized
                        
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: FORBIDDEN.
        '500':
          description: Token expired
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: jwt expired
                        
  /api/v1/current-user:
    get:
      tags:
        - user
      summary: Get current user information
      description: Get current user information
      operationId: currentUser
      security:
        - api_key: []
        
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/OK'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Login successfully.
                      data:
                        $ref: '#/components/schemas/User'
                        
        '400':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Please input email and password.
                        
        '500':
          description: Invalid token or JWT expired
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        enum:
                          - invalid token
                          - jwt expired
                          
  /api/v1/admin/register:
    post:
      tags:
        - user
      summary: Register new admin
      description: Register new admin
      operationId: registerAdmin
      security:
        - api_key: []
      requestBody:
        description: Register new admin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdmin'
        required: true
        
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data was created successfully.
                  data:
                    $ref: '#/components/schemas/User2'
                    
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Body is missing.
                    
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Unauthorized
                        
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FAIL'
                  - type: object
                    properties:
                      message:
                        example: Failed to create data. Validation error
                        
components:
  schemas:
    OK:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Success

    Deleted:
      type: object
      properties:
        status:
          type: string
          example: OK
        message:
          type: string
          example: Deleted successfully.

    FAIL:
      type: object
      properties:
        status:
          type: string
          example: FAIL
        message:
          type: string

    MemberRequest:
      type: object
      properties:
        name:
          type: string
          example: TESTER2
        email:
          type: string
          example: test2@gmail.com
        password:
          type: string
          example: test
        phoneNumber:
          type: string
          example: '082112345678'
        address:
          type: string
          example: Earth
          
    RegisterAdmin:
      type: object
      properties:
        name:
          type: string
          example: TESTER
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: test
        phoneNumber:
          type: string
          example: '082112345678'
        address:
          type: string
          example: Earth
          
    RootLogin:
      type: object
      properties:
        email:
          type: string
          example: root@gmail.com
        password:
          type: string
          example: root
          
    User:
      type: object
      properties:
        id:
          type: string
          example: d2d6d792-fe75-4613-b1c2-579ed0564b3c
        name:
          type: string
          example: root
        email:
          type: string
          example: root@gmail.com
        encryptedPassword:
          type: string
          example: $2b$10$CZWqOKzxtogiTgPNLmxMXORb0fEuZxr0qrEuh2exgpe5I8c6Zq.Du
        phoneNumber:
          type: string
          example: '082112345678'
        address:
          type: string
          example: Earth
        role:
          type: string
          enum:
            - ROOT
            - ADMIN
            - MEMBER
          example: ROOT
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
    User2:
      type: object
      properties:
        id:
          type: string
          example: 640f98ab-951b-4b7b-845d-6e78b411b566
        name:
          type: string
          example: TESTER
        email:
          type: string
          example: test@gmail.com
        encryptedPassword:
          type: string
          example: $2b$10$P0VY83faE3Wy71l5ZGq4ZunVoxb6wy4q1SxZAZLU7PgOm4RMfw0oK
        phoneNumber:
          type: string
          example: '082112345678'
        address:
          type: string
          example: Earth
        role:
          type: string
          enum:
            - ROOT
            - ADMIN
            - MEMBER
          example: ADMIN
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'

    User3:
      type: object
      properties:
        id:
          type: string
          example: 0d05f684-1a9c-4481-b5a8-cb7442cedeae
        name:
          type: string
          example: TESTER2
        email:
          type: string
          example: test2@gmail.com
        encryptedPassword:
          type: string
          example: $2b$10$P0VY83faE3Wy71l5ZGq4ZunVoxb6wy4q1SxZAZLU7PgOm4RMfw0oK
        phoneNumber:
          type: string
          example: '082112345678'
        address:
          type: string
          example: Earth
        role:
          type: string
          enum:
            - ROOT
            - ADMIN
            - MEMBER
          example: MEMBER
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'

    CourseList:
      type: object
      properties:
        title:
          type: string
          example: Learn Basic Javascript
        type:
          type: string
          example: premium
        level:
          type: string
          example: beginner
        price:
          type: number
          example: 99000
        forWho:
          type: string
          example: everyone
        description:
          type: string
          example: Some description
        image:
          type: string
          format: base64
          example: image.jpg
        creator:
          type: string
          example: John Doe
        
    Course1:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Learn Basic Javascript
        type:
          type: string
          example: premium
        level:
          type: string
          example: beginner
        price:
          type: number
          example: 99000
        forWho:
          type: string
          example: everyone
        description:
          type: string
          example: Some description
        image:
          type: string
          format: base64
          example: image.jpg
        creator:
          type: string
          example: John Doe
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
    Course2:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: New Course
        type:
          type: string
          example: free
        level:
          type: string
          example: intermediate
        price:
          type: number
          example: 20000
        forWho:
          type: string
          example: targetedAudience
        description:
          type: string
          example: Description for the new course
        image:
          type: string
          format: base64
          example: new_course_image.jpg
        creator:
          type: string
          example: Jane Doe
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
    Course3:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: New Course
        type:
          type: string
          example: premium
        level:
          type: string
          example: intermediate
        price:
          type: number
          example: 60000
        forWho:
          type: string
          example: targetedAudience
        description:
          type: string
          example: Description for the new course
        image:
          type: string
          format: base64
          example: new_course_image.jpg
        creator:
          type: string
          example: Jane Doe
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
    Chapter:
      type: object
      properties:
        title:
          type: string
          example: Set Up Project Tailwind with Shadcn UI
        chapterNumber:
          type: number
          example: 1
        duration:
          type: integer
          example: 60
          
    Chapter2:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Set Up Project Tailwind with Shadcn UI
        chapterNumber:
          type: number
          example: 1
        courseId:
          type: string
          format: uuid
        duration:
          type: integer
          example: 60
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
    Chapter3:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Set Up Project Tailwind with Shadcn UI
        chapterNumber:
          type: number
          example: 1
        courseId:
          type: string
          format: uuid
        duration:
          type: integer
          example: 60
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        
    Module:
      type: object
      properties:
        title:
          type: string
          example: Inheritance Javascript
        Video: 
          type: string
          example: https://youtu.be/DwTkyMJi890
          
    Module2:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: e1e4ec04-0ca4-4b8e-b3c3-4011c5ea2a1f
        chapterId:
          type: string
          format: uuid
        title:
          type: string
          example: Abstraction Javascript
        Video: 
          type: string
          example: https://youtu.be/ixOd42SEUF0
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
    Module3:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: e1e4ec04-0ca4-4b8e-b3c3-4011c5ea2a1f
        chapterId:
          type: string
          format: uuid
        title:
          type: string
          example: Abstraction Javascript
        Video: 
          type: string
          example: https://youtu.be/ixOd42SEUF0
        createdAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
        updatedAt:
          type: string
          example: '2023-10-18T13:42:59.162Z'
          
  securitySchemes:
    api_key:
      type: apiKey
      name: authorization
      in: header
